var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = TestTools","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Installer/Uninstaller-Functions","page":"API","title":"Installer/Uninstaller Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TestTools\nTestTools.install\nTestTools.uninstall","category":"page"},{"location":"api/#TestTools.TestTools","page":"API","title":"TestTools.TestTools","text":"The TestTools package provides support for testing and code quality CLIs.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.install","page":"API","title":"TestTools.install","text":"TestTools.install(; kwargs...)\n\nInstall all of the CLI utilities.\n\nKeyword arguments\n\njulia::AbstractString: path to julia executable. Default: path of the current running julia\nbin_dir::AbstractString: directory to install CLI utilities into. Default: ~/.julia/bin\nforce::Bool: flag used to indicate that existing CLI executables should be overwritten. Default: false\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.uninstall","page":"API","title":"TestTools.uninstall","text":"TestTools.uninstall(; kwargs...)\n\nUnnstall all of the CLI utilities.\n\nKeyword arguments\n\nbin_dir::AbstractString: directory containing CLI executables to uninstall. Default: ~/.julia/bin\n\n\n\n\n\n","category":"function"},{"location":"api/#jltest","page":"API","title":"jltest","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"jltest\njltest.find_tests\njltest.run_tests\njltest.cli\njltest.cli.run\njltest.cli.parse_args\njltest.get_wrapped_test_set_type","category":"page"},{"location":"api/#TestTools.jltest","page":"API","title":"TestTools.jltest","text":"The jltest module provides support for running unit tests.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jltest.find_tests","page":"API","title":"TestTools.jltest.find_tests","text":"find_tests(dir::AbstractString), kwargs...)::Vector{String}\n\nConstruct a list of absolute paths to Julia test files contained in dir.\n\nKeyword Arguments\n\nrecursive::Bool: flag indicating whether or not tests found in subdirectories of dir should be included in results. Default: true\nexclude_runtests::Bool: flag indicating whether or not to exclude files named runtests.jl from the list of test files. Default: true\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jltest.run_tests","page":"API","title":"TestTools.jltest.run_tests","text":"run_tests(tests::Vector; kwargs...)\nrun_tests(tests::AbstractString; kwargs...)\n\nRun tests in the list of files or modules provided in tests. If tests is an empty list or an empty string, an ArgumentError is thrown. File names in tests may be specified with or without the .jl extension.\n\nReturns a Dict containing statistis test statistics: total number of passed tests, failed tests, errors, and broken tests.\n\nKeyword Arguments\n\ndesc::AbstractString: description to use for test set used to group tests. Default: the default description set by @testset\ntest_set_type::Type: type of test set to use to group tests. When test_set_type is set to nothing, the tests are run individually. Default: EnhancedTestSet{DefaultTestSet}\nnote: Note\nWhen the JLTEST_FAIL_FAST environment variable is set to \"true\", the test_set_type argument is overridden and set to EnhancedTestSet{FallbackTestSet} so that tests are run in fail-fast mode.\ntest_set_options::Dict: options to pass to @testset macro\nrecursive::Bool: flag indicating whether or not to run tests found in subdirectories of directories in tests. Default: true\nexclude_runtests::Bool: flag indicating whether or not to exclude files named runtests.jl from the list of test files that are run. Default: true\n\nReturns\n\nDict: test statistics\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jltest.cli","page":"API","title":"TestTools.jltest.cli","text":"cli.jl defines the jltest.cli module containing functions for the jltest CLI.\n\nNotes\n\nCLI functions are defined in a .jl file so that testing and code quality tools can by applied to the CLI source code.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jltest.cli.run","page":"API","title":"TestTools.jltest.cli.run","text":"run(tests::Vector; kwargs...)\n\nRun unit tests defined in the list of files or modules provided in tests.\n\nReturns true if all tests pass; returns false otherwise.\n\nKeyword Arguments\n\nfail_fast::Bool: flag indicating whether or not to stop testing at first failure. Default: false\nuse_wrapper::Bool: flag indicating whether or not to run tests without first wrapping them in an EnhancedTestSet. Default: true\nnote: Note\nIgnored if fail_fast is set to true.\nnote: Note\nSetting use_wrapper to false will disable EnhancedTestSet functionality within each test files unless the test fileexplicitly sets the test set when using the @testset macro or\ncalls jltest.run_tests() (without setting the test_set_type keyword argument to nothing).\nrecursive::Bool: flag indicating whether or not to run tests found in subdirectories of directories in tests. Default: true\nverbose::Bool: print more output to the console. Default: false\n\nReturns\n\nBool: true if all tests passed; false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jltest.cli.parse_args","page":"API","title":"TestTools.jltest.cli.parse_args","text":"parse_args(; raw_args::Vector{<:AbstractString}=ARGS)::Dict\n\nParse and return CLI arguments contained in raw_args. By default, raw_args is set to ARGS, the command-line arguments provided to the executable that called parse_args().\n\nnote: Note\nEnabling code execution counting is not implemented within the Julia code contained in the TestTools package; it is implemented in the jltest bash script. The --code-coverage option is only included in the argument table so that it appears in the usage message.\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jltest.get_wrapped_test_set_type","page":"API","title":"TestTools.jltest.get_wrapped_test_set_type","text":"get_wrapped_test_set_type(ts::EnhancedTestSet{T}\n\nReturn type of test set wrapped by ts.\n\n\n\n\n\n","category":"function"},{"location":"api/#jlcoverage","page":"API","title":"jlcoverage","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"jlcoverage\njlcoverage.display_coverage\njlcoverage.cli\njlcoverage.cli.run\njlcoverage.cli.parse_args","category":"page"},{"location":"api/#TestTools.jlcoverage","page":"API","title":"TestTools.jlcoverage","text":"The jlcoverage module provides support for analyzing code coverage of unit tests.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jlcoverage.display_coverage","page":"API","title":"TestTools.jlcoverage.display_coverage","text":"display_coverage(coverage_data::Vector; startpath::AbstractString)\n\nDisplay coverage results provided in coverage_data. File names are displayed relative to startpath. To display absolute paths, set startpath to an empty string. By default, startpath is set to the current working directory.\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jlcoverage.cli","page":"API","title":"TestTools.jlcoverage.cli","text":"cli.jl defines the jlcoverage.cli module containing functions for the jlcoverage CLI.\n\nNotes\n\nCLI functions are defined in a .jl file so that testing and code quality tools can by applied to the CLI source code.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jlcoverage.cli.run","page":"API","title":"TestTools.jlcoverage.cli.run","text":"run(paths::Vector; kwargs...)\n\nRun code coverage analysis for files and directories in paths.\n\nKeyword Arguments\n\nverbose::Bool: print more output to the console. Default: false\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jlcoverage.cli.parse_args","page":"API","title":"TestTools.jlcoverage.cli.parse_args","text":"parse_args(; raw_args::Vector{<:AbstractString}=ARGS)::Dict\n\nParse and return CLI arguments contained in raw_args. By default, raw_args is set to ARGS, the command-line arguments provided to the executable that called parse_args().\n\n\n\n\n\n","category":"function"},{"location":"api/#jlcoverage-2","page":"API","title":"jlcoverage","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"jlcodestyle\njlcodestyle.cli\njlcodestyle.cli.run\njlcodestyle.cli.parse_args","category":"page"},{"location":"api/#TestTools.jlcodestyle","page":"API","title":"TestTools.jlcodestyle","text":"The jlcodestyle module provides support for checking and enforcing code style.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jlcodestyle.cli","page":"API","title":"TestTools.jlcodestyle.cli","text":"cli.jl defines the jlcodestyle.cli module containing functions for the jlcodestyle CLI.\n\nNotes\n\nCLI functions are defined in a .jl file so that testing and code quality tools can by applied to the CLI source code.\n\n\n\n\n\n","category":"module"},{"location":"api/#TestTools.jlcodestyle.cli.run","page":"API","title":"TestTools.jlcodestyle.cli.run","text":"run(paths::Vector; kwargs...)\n\nRun code style checks for files contained in paths.\n\nReturns true if style checks pass; returns false otherwise.\n\nKeyword Arguments\n\nstyle::JuliaFormatter.AbstractStyle: code style to apply. Default: BlueStyle()\noverwrite::Bool: overwrite existing files with style-corrected versions. Default: false\nverbose::Bool: print more output to the console. Default: false\n\n\n\n\n\n","category":"function"},{"location":"api/#TestTools.jlcodestyle.cli.parse_args","page":"API","title":"TestTools.jlcodestyle.cli.parse_args","text":"parse_args(; raw_args::Vector{<:AbstractString}=ARGS)::Dict\n\nParse and return CLI arguments contained in raw_args. By default, raw_args is set to ARGS, the command-line arguments provided to the executable that called parse_args().\n\n\n\n\n\n","category":"function"},{"location":"api/#EnhancedTestSet","page":"API","title":"EnhancedTestSet","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"jltest.EnhancedTestSet\njltest.EnhancedTestSet(::AbstractString)","category":"page"},{"location":"api/#TestTools.jltest.EnhancedTestSet","page":"API","title":"TestTools.jltest.EnhancedTestSet","text":"struct EnhancedTestSet{T<:AbstractTestSet} <: AbstractTestSet\n\nExtension of the AbstracctTestSet type that provides the following functionality:\n\ndisplay diffs (when available) for comparison test failures;\nsupport fail-fast (i.e., stop testing at first failure).\n\n\n\n\n\n","category":"type"},{"location":"api/#TestTools.jltest.EnhancedTestSet-Tuple{AbstractString}","page":"API","title":"TestTools.jltest.EnhancedTestSet","text":"EnhancedTestSet(description::AbstractString; kwargs...)\n\nConstruct an EnhancedTestSet with the specified description.\n\nKeyword Arguments\n\nwrap::Type{<:AbstractTestSet}: test set type to wrap. Default: DefaultTestSet\n\n\n\n\n\n","category":"method"},{"location":"acknowledgements/#Acknowledgements","page":"Acknowledgements","title":"Acknowledgements","text":"","category":"section"},{"location":"acknowledgements/","page":"Acknowledgements","title":"Acknowledgements","text":"TestTools leverages several excellent Julia packages to support its core capabilities.\nCoverage\nCoverageTools\nJuliaFormatter\nTestTools borrows ideas (and some code) from the following great Julia packages.\nTestSetExtensions\nThe base code for EnhancedTestSet (which implements diffs for comparisons and progress dots) comes directly from TestsetExtensions.ExtendedTestSet.\nThe run_tests() and find_tests() methods are essentially a re-implementation and refactoring of the TestsetExtensions.@includetests macro as methods.\nSafeTestsets\nThe strategy for isolating tests came from the SafeTestsets.@safetestset macro.\njlpkg\nThe strategy for installing CLI executables came from jlpkg.install().\nTestTools was inspired by analogous code testing packages in the Python ecosystem:\npytest\ncoverage\npycodestyle","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Start Julia in the default (global) environment.\ntip: Tip\nInstallation in the default environment makes the CLI tools available from within all projects.\nInstall the TestTools package.\npkg> add TestTools  # Press ']' to enter the Pkg REPL mode.\nInstall the CLI tools.\njulia> using TestTools; TestTools.install()\nBy default, the CLI executables are installed to ~/.julia/bin.\nTo install the CLI executables to a different location, set the bin_dir keyword argument to the path of the directory where the executables should be installed.\njulia> using TestTools; TestTools.install(; bin_dir=/PATH/TO/BIN/DIR)\nTo overwrite pre-existing CLI executables, set the force keyword argument to true.\njulia> using TestTools; TestTools.install(; force=true)\nFor other installation options, please refer to the documentation for the TestTools.install() method.","category":"page"},{"location":"installation/#Uninstallation","page":"Installation","title":"Uninstallation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"CLI executables may be uninstalled by using the TestTools.uninstall() method.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using TestTools; TestTools.uninstall()","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"By default, uninstall() removes CLI executables from ~/.julia/bin. To uninstall CLI executables installed to a different location, set the bin_dir keyword argument to the path of the directory containing the executables to uninstall.","category":"page"},{"location":"docs-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docs-index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"#TestTools","page":"Home","title":"TestTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TestTools is a collection of CLI tools and APIs that simplifies code testing, coverage analysis, and style checking for the Julia programming language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TestTools provides the following core components.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CLI tools: jltest, jlcoverage, jlcodestyle\nAPI: functions and types to support unit testing (e.g. enhanced test sets and auto-detection of tests) and code coverage analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Why-TestTools?","page":"Home","title":"Why TestTools?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Easy-to-use (and fast) CLI tools for testing\nCompatible with Pkg.test()\nEnhanced test set functionality – diffs for failed comparisons and fail-fast support\nNoninvasive – introduces no package-level dependencies","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CLI-Tools","page":"Home","title":"CLI Tools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"note: Note\nBecause they have been configured to eliminate unnecessary compiler optimizations, the TestTools CLI utilities often run faster than calling the functions they rely on from the Julia REPL.","category":"page"},{"location":"#jltest-cli","page":"Home","title":"jltest","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run unit tests in a single file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest test/tests.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run all unit tests contained in a directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest test/","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run unit tests with fail-fast enabled (i.e., halt testing after first failing test).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest -x test/tests.jl  # short option\n\n$ jltest --fail-fast test/tests.jl  # long option","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate code coverage data when running unit tests (i.e., with code execution counting).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest -c test/tests.jl  # short option\n\n$ jltest --code-coverage test/tests.jl  # long option","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display a more detailed test summary after running unit tests.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest -v test/tests.jl  # short option\n\n$ jltest --verbose test/tests.jl  # long option","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display help and usage messages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jltest -h  # short option\n\n$ jltest --help  # long option","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Can't turn off fail-fast?\nWhen the JLTEST_FAIL_FAST environment variable is set to true, fail-fast is always enabled (even if jltest is run without the fail-fast option or the test_set_type keyword argument of jltest.run_tests() is set to a non-fail-fast test set type). If fail-fast mode seems to be permanently enabled, check to make sure the JLTEST_FAIL_FAST environment variable has not been accidentally set to true.","category":"page"},{"location":"#jlcoverage-cli","page":"Home","title":"jlcoverage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generate a coverage report (after running unit tests while collecting coverage data).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ julia -e 'import Pkg; Pkg.test(\"TestTools\"; coverage=true)'  # run unit tests\n\n$ jlcoverage  # generate coverage report\n-------------------------------------------------------------------------------\nFile                                  Lines of Code     Missed   Coverage\n-------------------------------------------------------------------------------\nsrc/TestTools.jl                                  0          0        N/A\nsrc/jlcodestyle/cli/cli.jl                       34          0     100.0%\n...\nsrc/pkg.jl                                       42          3      92.9%\n-------------------------------------------------------------------------------\nTOTAL                                           289          7      97.6%","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display help and usage messages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcoverage -h  # short option\n\n$ jlcoverage --help  # long option","category":"page"},{"location":"#jlcodestyle-cli","page":"Home","title":"jlcodestyle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run basic code style check (reformatting of source file disabled).","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle src/TestTools.jl\n\n$ jlcodestyle examples/jlcodestyle/not-blue-style.jl\nStyle errors found. Files not modified.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nNo output is displayed when there are no style errors. To display a status message, use the -v or --verbose command-line option.$ jlcodestyle -v src/TestTools.jl\n[ Info: Style = BlueStyle\n[ Info: Overwrite = false\nFormatting src/TestTools.jl\n\nNo style errors found.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run code style check with reformatting of source file enabled.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle --overwrite examples/jlcodestyle/not-blue-style.jl\nStyle errors found. Files modified to correct errors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run code style check with an explicitly selected style.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle -s yas examples/jlcodestyle/not-yas-style.jl\nStyle errors found. Files not modified.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Display help and usage messages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ jlcodestyle -h  # short option\n\n$ jlcodestyle --help  # long option","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Integration-with-Pkg.test()","page":"Home","title":"Integration with Pkg.test()","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When using Pkg.test() to run tests, TestTools makes it easy to automatically gather and run all tests within the test directory (including subdirectories). Simply, create a test/runtests.jl file containing the following lines.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TestTools: jltest\njltest.run_test(@__DIR__)","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nPassing @__DIR__ as the first argument causes jltest.run_tests() to auto-detect all tests in the directory containing the runtests.jl file. To run tests that reside in a different directory, replace @__DIR__ with the path to the directory containing the tests. For more details, please refer to the documentation for the jltest.run_tests() method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nWhen running tests using Pkg.test(), enable fail-fast mode by setting the JLTEST_FAIL_FAST environment variable to true.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[EnhancedTestSet](@ref-TestTools.jltest.EnhancedTestSet)-Functionality","page":"Home","title":"EnhancedTestSet Functionality","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TestTools runs tests within an EnhancedTestSet, which augments the DefaultTestSet with the following functionality:","category":"page"},{"location":"","page":"Home","title":"Home","text":"display diffs for failed comparison tests (when possible),\nsupport fail-fast (i.e., halt testing at first failure), and\ndisplay progress dots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nNo special effort is required to benefit from these enhancements. Simply use the @testset macro without expicitly specifying the test set type (which is the easiest way to use @testset anyways). By default, @testset inherits the test set type, so tests run using either the jltest CLI tool or jltest.run_tests() will automatically inherit the EnhancedTestSet functionality.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nWhen @testset is invoked with an explicitly specified test set type, diffs are no longer displayed, but fail-fast still works.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Noninvasive","page":"Home","title":"Noninvasive","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using the TestTools CLI utilities within a Julia project does not require the addition of TestTools as a dependency for the project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nDepending on how unit tests are organized, the test environment of a Julia package might have TestTools as a dependency even though the package itself does not have TestTools as a dependency.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nTo be noninvasive, TestTools must be installed in the default (global) environment.","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"How are jlcoverage and jlcodestyle different than directly using the Coverage, CoverageTools, or JuliaFormatter packages?\nTestTools provides CLI tools that wrap functionality in the Julia packages that it depends on. Some trade-offs of using the TestTools CLI tools rather than directly calling package functions include:\nPros\nLess typing when running from the shell\nCombines useful sequences of package functions\nEasier to set commonly used options\nShorter runtime (due to CLI-tuned compiler options)\nCons\nInconvenient to use from the Julia REPL\nDoes not cover all of the combinations of package functions\nDoes not cover all options available through package functions\nLonger runtime (depends on compiler options used to start Julia REPL)\nWhat is the difference between jlcodestyle and JuliaFormatter's format.jl CLI tool?\nMethod for specifying style\njlcodestyle: style level – Blue vs YAS vs Default\nformat.jl: line level (e.g., number of spaces to use for indentation)\nFile overwriting behavior\njlcodestyle: by default, files are not overwritten. There is a command-line option enable file overwriting.\nformat.jl: always overwrites files\nPerformance\njlcodestyle: faster startup through the use of tuned Julia command-line options\nformat.jl: no command-line option tuning to reduce startup time","category":"page"}]
}
